apply plugin: 'com.android.library'
apply plugin: 'maven'


android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {

    api fileTree(dir: 'libs', include: ['*.jar'])
    testApi 'junit:junit:4.12'
    androidTestApi 'com.android.support.test:runner:1.0.1'
    androidTestApi 'com.android.support.test.espresso:espresso-core:3.0.1'

    // Support libraries
    api deps.support.app_compat
    api deps.support.v4
    api deps.support.design
    api deps.support.cardview
    api deps.support.recyclerview

    // 生命周期组建
    api deps.lifecycle.runtime
    api deps.lifecycle.extensions
    annotationProcessor deps.lifecycle.compiler
    api deps.room.runtime
    annotationProcessor deps.room.compiler

    //图片加载fresco  妹子模块中才有用到
    api 'com.facebook.fresco:fresco:1.5.0'
    api "com.facebook.fresco:imagepipeline-okhttp3:1.5.0"

    // 注解
//    api deps.butterknife.runtime
//    annotationProcessor deps.butterknife.compiler

    //retrofit & http
    api deps.retrofit.runtime
    api deps.retrofit.gson
    api deps.retrofit.adapter_rxjava2
    api deps.okhttp.okhttp3
    api deps.okhttp.okhttp3_logging_interceptor

    // RxJava
//    implementation deps.rxjava2
    api deps.rx_android

    //router
    api deps.arouter.runtime

    //logutils
    api deps.logutils

    //---------工单模块需要---------
    //下拉刷新
    api deps.smart.version
    //Parcel 序列器  用于各activity的数据双向绑定封装
    api deps.parceler.version
    //吐司
    api deps.toast.version
    //图片加载
    api deps.glide.version
    //下拉刷新
    api deps.systembartint.version
    //状态页面
    api deps.loadsir.version
    //广播
    api deps.eventbus.version
    //加载更多
    api deps.pullloadmore.version
    //官方布局
    api deps.constraint.version
    //网上封装的弹窗
    api deps.loadingdialog.version
    //权限请求
    api deps.mpermission.version
    //列表适配器
    api deps.BaseRecyclerView.version
    //---------工单模块需要---------


    //---------用户，模块需要---------
    //通用的一些工具类
    api deps.commonsio.version
    //---------用户，模块需要---------


}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            snapshotRepository(url: getsSnapshotUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            repository(url: getReleaseUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            pom.project {
                version '1.0.0'
                artifactId 'lib-opensource'
                groupId getGroupId()
                packaging getType()
                description getDescription()
            }
        }
    }
}

artifacts {
    archives file('lib_opensource.aar')
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getsSnapshotUrl() {
    return hasProperty('MAVEN_REPO_SNAPSHOT_URL') ? MAVEN_REPO_SNAPSHOT_URL : ""
}

def getReleaseUrl() {
    return hasProperty('MAVEN_REPO_RELEASE_URL') ? MAVEN_REPO_RELEASE_URL : ""
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getGroupId() {
    return hasProperty('GROUP_ID') ? GROUP_ID : ""
}

def getType() {
    return hasProperty('TYPE') ? TYPE : ""
}

def getDescription() {
    return hasProperty('DESCRIPTION') ? DESCRIPTION : ""
}